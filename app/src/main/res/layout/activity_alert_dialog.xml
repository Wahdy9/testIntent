<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".AlertDialogActivity">

    <!-- Baseline, which can be used to align the texts inside the views  -->

    <!--   -->
    <Button
        android:id="@+id/button8"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:onClick="showAlert"
        android:text="Show Alert"
        app:layout_constraintBottom_toBottomOf="@+id/imageView"
        app:layout_constraintEnd_toEndOf="@+id/imageView"
        app:layout_constraintStart_toStartOf="@+id/imageView"
        app:layout_constraintTop_toBottomOf="@+id/imageView" />

    <ImageView
        android:id="@+id/imageView"
        android:layout_width="150dp"
        android:layout_height="150dp"
        android:layout_marginTop="32dp"
        android:layout_marginEnd="32dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:srcCompat="@mipmap/ic_launcher" />


    <!--  if we have 2 btns, if the first btn is GONE then the second btn
    will lose the 32 margin of the first btn, Solution: use  app:layout_goneMarginStart="32dp"
    on the second btn, this attribute will active when btn1 is GONE and it will keep
    its margin. -> Very Useful-->

    <Button
        android:id="@+id/button13"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="12dp"
        android:text="Button2"
        app:layout_constraintStart_toEndOf="@+id/button12"
        app:layout_goneMarginStart="32dp"
        tools:layout_editor_absoluteY="249dp" />

    <Button
        android:id="@+id/button12"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="36dp"
        android:text="Button1"
        android:visibility="gone"
        app:layout_constraintStart_toStartOf="parent"
        tools:layout_editor_absoluteY="249dp" />


    <!--  chains, its style: spread(default), spread inside, packed(can use Bias with this mode)  -->
    <!-- we can also use wieght like Linear layout, the view must have match_constraint
     then use can use centerHorizantal_weght="" -->
    <!-- we can also combine horizantal chain with vertical chain  -->
    <Button
        android:id="@+id/button14"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Button"
        app:layout_constraintEnd_toStartOf="@+id/button15"
        app:layout_constraintHorizontal_bias="0.52"
        app:layout_constraintHorizontal_chainStyle="spread_inside"
        app:layout_constraintStart_toStartOf="parent"
        tools:layout_editor_absoluteY="367dp" />

    <Button
        android:id="@+id/button15"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Button"
        app:layout_constraintEnd_toStartOf="@+id/button16"
        app:layout_constraintHorizontal_bias="0.5"
        app:layout_constraintStart_toEndOf="@+id/button14"
        tools:layout_editor_absoluteY="366dp" />

    <Button
        android:id="@+id/button16"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Button"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHorizontal_bias="0.5"
        app:layout_constraintStart_toEndOf="@+id/button15"
        tools:layout_editor_absoluteY="364dp" />

    <!-- Guildlines (vertical/horizantal) can help us align the view by constrain them to it
    we create them using helpers in menu, they are thier own objects-->
    <!-- Barries is same as Guidlines, but its width is defined by the views inside it,
    -useful when app support deiffrent language, when word have diffrent sizes
     -its doesnt make nested views so it wont lower perfomrance-->

    <androidx.constraintlayout.widget.Guideline
        android:id="@+id/guideline"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintGuide_begin="76dp" />


    <!-- here we used app:layout_constraintWidth_percent="0.5" ->50% + width=0dp
     this will make the middle btn 50% width from his parent, even bigger than its
     constraints-->

    <Button
        android:id="@+id/button17"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="32dp"
        android:text="Button"
        app:layout_constraintStart_toStartOf="parent"
        tools:layout_editor_absoluteY="457dp" />

    <Button
        android:id="@+id/button19"
        android:layout_width="0dp"
        app:layout_constraintWidth_percent="0.5"
        android:layout_height="wrap_content"
        android:text="Button"
        app:layout_constraintEnd_toStartOf="@+id/button18"
        app:layout_constraintStart_toEndOf="@+id/button17"
        tools:layout_editor_absoluteY="515dp" />

    <Button
        android:id="@+id/button18"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="32dp"
        android:text="Button"
        app:layout_constraintEnd_toEndOf="parent"
        tools:layout_editor_absoluteY="455dp" />




</androidx.constraintlayout.widget.ConstraintLayout>